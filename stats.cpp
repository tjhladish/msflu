#include <iostream>
#include <vector>
#include "AbcUtil.h"
//#include "ranker.h"

using namespace std;
// To compile on hipergator:
// g++ -O2 -std=c++0x -Wall -I../../AbcSmc -I$HPC_GSL_INC ../../AbcSmc/AbcUtil.o stats.cpp -o stats -lm -L$HPC_GSL_LIB/ -lgsl -lgslcblas
// or
// mpicxx -O2 -std=c++11 -w0 -DMPICH_IGNORE_CXX_SEEK -DMPICH_SKIP_MPICXX -D USING_MPI -I/scratch/lfs/thladish/AbcSmc -I$HPC_GSL_INC ../../AbcSmc/AbcUtil.o stats.cpp -o stats -L/scratch/lfs/thladish/AbcSmc -lm -L$HPC_GSL_LIB/ -lgsl -lgslcblas

// To compile on dragonfly:
// g++ -O2 -std=c++0x -Wall -I../../AbcSmc ../../AbcSmc/AbcUtil.o stats.cpp -o stats -L../../AbcSmc -lm -lgsl -lgslcblas

double metric(vector<double> &incidence, int idx) {
    double val = 0;
    ABC::Map<ABC::Col> col(&incidence[0], incidence.size()); // copy data from vector into Col
    switch (idx){
        case 0: val = ABC::mean(col);                           break;
        case 1: val = quantile(incidence, 0.0);                 break;
        case 2: val = quantile(incidence, 0.25);                break;
        case 3: val = quantile(incidence, 0.5);                 break;
        case 4: val = quantile(incidence, 0.75);                break;
        case 5: val = quantile(incidence, 1.0);                 break;
        case 6: val = sqrt(ABC::variance(col, ABC::mean(col))); break;
        case 7: val = ABC::skewness(col);                       break;
        case 8: val = ABC::median_crossings(col);               break;
    }
    return val;
}

int main() {
    // Sentinelle ILI case data per 100k, aggregated over flu season starting in years 1986-2014
    //Rows: FR.A,FR.B,FR.C,FR.D,FR.E,FR.F,FR.G,FR.I,FR.J,FR.K,FR.M,FR.N,FR.O,FR.P,FR.Q,FR.R,FR.S,FR.U,FR.V
    vector< vector<double> > case_mat= { 
        {5166,4902,6919,6946,2218,3162,3933,4460,3746,5167,5439,4267,6915,9416,2676,1760,4237,4398,5616,3639,4010,3913,6181,6329,3521,2601,5822,2391,5272},
        {2450,4068,11628,8009,992,3308,4973,7181,1343,5324,4613,3902,6384,3976,2206,3727,2020,5165,5750,2546,4713,3006,3461,2783,3083,1813,3289,2020,5234},
        {4225,5677,9812,4238,621,2681,5583,3930,2081,4404,3397,3187,1187,2617,2501,3085,2104,1993,3123,2550,3317,3820,6707,4855,5246,5352,6269,2265,5226},
        {5653,3780,9749,7450,2105,4458,3893,7434,3011,7093,6443,4046,6188,5783,3016,4828,1155,5557,5413,1376,3638,2472,4408,3718,1297,1358,3130,531,2390},
        {1442,4970,12078,9273,5026,9306,8084,9892,3476,12754,7483,7815,7043,7562,4332,4029,2752,4784,5790,3971,4055,3685,4966,5049,4319,3678,4799,2278,5295},
        {3705,2599,4128,4880,603,589,4813,6623,2131,6645,3955,4864,4341,2906,1421,1457,652,4999,2534,1858,3451,3480,4432,4225,4405,2907,5464,2035,5496},
        {5959,3458,5535,6705,919,1591,3688,4393,1536,4565,5785,3049,5130,14331,1421,2772,2653,4076,4660,3512,3145,4686,5544,8838,5323,4132,7748,3189,6150},
        {7229,5939,9281,6507,1039,1764,5990,6242,2903,6009,5270,4695,3263,5706,603,8507,2442,988,2619,1032,2574,3054,3554,5121,3401,2475,5124,1450,3903},
        {4348,3934,7678,6569,2482,3345,3325,4029,2579,3444,5881,3482,3478,4475,2256,2510,1263,3870,4238,3550,2879,3206,2921,4320,3402,2435,5382,1611,5870},
        {3793,5335,8798,8899,2191,3152,4606,4240,3001,4491,7053,5156,8410,5512,3632,4563,2511,7662,6337,2841,5543,5167,5188,5850,5150,4110,7218,3486,4862},
        {3586,2578,5918,6202,2074,2092,3117,4443,1897,5531,5954,4745,4336,2727,1547,3192,2759,3419,6044,5592,2276,4095,2837,3397,2539,1745,3902,1624,4553},
        {5182,5103,7831,6201,1039,3173,4196,7307,2234,5070,7051,3963,6498,5479,1810,2809,2807,3406,4153,1498,2709,2440,4168,5316,3096,2087,5983,1903,6094},
        {3494,3797,6582,5884,2495,3763,5232,5347,2624,7790,4039,4427,5267,8100,5797,2809,3121,3803,6559,2228,5588,5387,8291,8510,6792,5545,11391,2976,5109},
        {3559,3373,7106,11988,1261,1229,3062,4460,1146,4142,4037,2989,1398,5567,2297,406,1410,4525,3094,3033,1157,2521,3482,4082,3088,401,1637,510,4218},
        {5809,4431,8316,10553,3279,3901,3348,4847,3216,4665,4770,3101,3699,2373,1035,1149,2197,4307,5362,3045,3352,1239,2847,4243,1909,1334,4252,1209,3810},
        {2562,4317,9476,5677,1636,3570,3707,5951,3052,8321,5372,5216,8272,4021,2881,2370,3731,4096,4751,2099,1505,3786,2582,4990,2543,1185,3186,1055,5653},
        {5485,4610,12468,12244,4187,3368,3789,7654,3990,6254,8000,5344,7426,7472,4267,4676,1127,3662,2661,1408,2965,2646,3843,2196,2893,1199,3209,1190,4687},
        {5936,5269,10186,9473,6919,4562,3119,7252,3607,6361,5455,4543,7335,6293,3644,3887,3480,4319,4926,2707,5106,4249,4003,5042,4107,3447,6404,2910,5612},
        {5203,4499,8374,8928,2746,4821,5452,7169,3378,6201,9805,5948,8427,6992,6752,8445,6748,6612,9250,5572,5215,8076,9414,7750,5968,3961,7910,2995,6717}};

    vector<string> met_names = {"mean:             ", "0%   quantile:    ", "25%  quantile:    ", "50%  quantile:    ", "75%  quantile:    ",
                                "100% quantile:    ", "stdev:            ", "skewness:         ", "median crossings: "};

    for (unsigned int met_idx = 0; met_idx < met_names.size(); ++met_idx) {
        cout << met_names[met_idx] << endl;
        for (vector<double> incidence: case_mat) {
            cout << metric(incidence, met_idx) << endl;
            //cout << col.transpose() << endl;
        }
    }
}
